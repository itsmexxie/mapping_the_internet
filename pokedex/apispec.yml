openapi: 3.0.0
info:
  title: "Pokedex API"
  description: "A service list and authentication provider for the MTI project. In short, a service provides some sort of mechanism (e.g. looking up ip addresses, serving websites, etc.), while a unit is a specific instance of the service server. Clients should at first lookup available units for the wanted service and then ping the specific unit (excluding crawlers, which should be managed and invoked via the orchestrator)."
  version: "0.1.0"

paths:
  /:
    get:
      summary: "Index"
      responses:
        200:
          description: "OK"
  /_unit:
    get:
      summary: "Unit information"
      responses:
        200:
          description: "Unit information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
  /_health:
    get:
      summary: "Health endpoint for Docker healthcheck. Always returns a 200 status code"
      responses:
        200:
          description: "OK"
  /auth/login:
    post:
      summary: "Login using the provided service credentials. Automatically registers the client as a service unit if an IP address and port is specified."
      requestBody:
        description: "Login credentials"
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                address:
                  type: string
                port:
                  type: number
              required:
                - username
                - password
            example:
              username: crawler
              password: averysecurepassword
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: "Invalid IP address and/or port"
        401:
          description: "Wrong username and/or password"
        403:
          description: "The service has max_one set to true and there is already a unit running somewhere"
  /auth/logout:
    post:
      summary: "Logout using the provided service token and deregister the corresponding unit"
      parameters:
        - $ref: "#/components/parameters/tokenParam"
      responses:
        200:
          description: "OK"
        401:
          description: "No or invalid service token provided"
  /services:
    get:
      summary: "Returns a list of defined services"
      parameters:
        - $ref: "#/components/parameters/tokenParam"
      responses:
        200:
          description: "A list of services"
        401:
          description: "No or invalid service token provided"
  /services/{id}:
    get:
      summary: "Returns the specified service"
      parameters:
        - $ref: "#/components/parameters/tokenParam"
      responses:
        200:
          description: "Service object, including available units"
        401:
          description: "No or invalid service token provided"
  /services/{id}/units:
    get:
      summary: "Returns the available units for the specified service type"
      parameters:
        - $ref: "#/components/parameters/tokenParam"
      responses:
        200:
          description: "Unit list for the specified service type"
        401:
          description: "No or invalid service token provided"

components:
  parameters:
    tokenParam:
      name: token
      in: header
      required: true
      schema:
        type: string
